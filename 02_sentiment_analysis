from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import numpy as np

# 初始化分析器
analyzer = SentimentIntensityAnalyzer()

# 分批处理情感分析
batch_size = 10000  # 根据内存调整，建议从10000开始
sentiments = []

for i in range(0, len(reviews_df), batch_size):
    batch = reviews_df['text'].iloc[i:i+batch_size]
    batch_sentiments = [analyzer.polarity_scores(text)['compound'] for text in batch]
    sentiments.extend(batch_sentiments)
    print(f"已完成: {min(i+batch_size, len(reviews_df))}/{len(reviews_df)} 条情感分析")
    
    # 释放内存
    del batch, batch_sentiments

# 添加情感列
reviews_df['sentiment'] = sentiments

# 保存进度（可选）
reviews_df.to_parquet('data_with_sentiment.parquet')


# === 用户分组 ===
print("=== 用户分组分析 ===")

# 计算每个用户的评论数量
user_review_counts = reviews_df_clean.groupby('user_id').size()
print(f"用户评论数量分布:")
print(user_review_counts.describe())

# 分组
single_review_users = user_review_counts[user_review_counts == 1].index
multi_review_users = user_review_counts[user_review_counts > 1].index

print(f"\n单评论用户: {len(single_review_users)} ({len(single_review_users)/len(user_review_counts)*100:.1f}%)")
print(f"多评论用户: {len(multi_review_users)} ({len(multi_review_users)/len(user_review_counts)*100:.1f}%)")

# 创建用户类型标记
reviews_df_clean['user_type'] = reviews_df_clean['user_id'].map(
    lambda x: 'multi' if x in multi_review_users else 'single'
)

# === 为多评论用户准备时序特征 ===
def prepare_time_series_features(df):
    """为多评论用户准备时序特征"""
    
    # 只处理多评论用户
    df_multi = df[df['user_type'] == 'multi'].copy()
    
    # 确保timestamp是datetime类型
    df_multi['timestamp'] = pd.to_datetime(df_multi['timestamp'])
    
    # 按用户和时间排序
    df_multi = df_multi.sort_values(['user_id', 'timestamp']).reset_index(drop=True)
    
    # 计算时序特征
    df_multi['prev_sentiment'] = df_multi.groupby('user_id')['sentiment'].shift(1)
    df_multi['prev_rating'] = df_multi.groupby('user_id')['rating'].shift(1)
    
    # 计算变化量
    df_multi['sentiment_change'] = df_multi['sentiment'] - df_multi['prev_sentiment']
    df_multi['rating_change'] = df_multi['rating'] - df_multi['prev_rating']
    
    # 计算累积统计
    df_multi['sentiment_cumsum'] = df_multi.groupby('user_id')['sentiment'].cumsum()
    df_multi['review_sequence'] = df_multi.groupby('user_id').cumcount() + 1
    
    # 计算滚动统计（前3次评论的平均情感）
    df_multi['sentiment_rolling_mean'] = df_multi.groupby('user_id')['sentiment'].rolling(
        window=3, min_periods=1
    ).mean().values
    
    # 情感波动性（标准差）
    df_multi['sentiment_volatility'] = df_multi.groupby('user_id')['sentiment'].rolling(
        window=3, min_periods=2
    ).std().values
    
    return df_multi

# 准备多评论用户数据
df_multi_users = prepare_time_series_features(reviews_df_clean)
print(f"多评论用户时序数据准备完成: {len(df_multi_users)} 条记录")
