# === 2️⃣ 简化版统计检验 ===
def simplified_statistical_tests():
    """
    简化版统计检验
    手写t-test和其他统计测试
    """
    
    print("=== 简化版统计检验 ===")
    
    try:
        # 加载横截面数据
        df_cross = pd.read_parquet('data_cross_sectional.parquet')
        
        # 采样数据避免内存问题
        df_sample = df_cross.sample(n=5000, random_state=42)
        
        print(f"统计检验样本: {len(df_sample)} 用户")
        
        # 分组数据
        high_active = df_sample[df_sample['user_type'] == 'multi']
        low_active = df_sample[df_sample['user_type'] == 'single']
        
        print(f"高活跃用户: {len(high_active)}")
        print(f"低活跃用户: {len(low_active)}")
        
        # 进行各种统计检验
        statistical_tests = {}
        
        # 1. 独立样本t检验：情绪差异
        print("\n1. 情绪差异t检验...")
        sentiment_high = high_active['sentiment_mean'].dropna().tolist()
        sentiment_low = low_active['sentiment_mean'].dropna().tolist()
        
        t_stat_sentiment, p_val_sentiment = manual_t_test(sentiment_high, sentiment_low)
        
        statistical_tests['sentiment_t_test'] = {
            't_statistic': t_stat_sentiment,
            'p_value': p_val_sentiment,
            'effect_size': calculate_cohens_d(sentiment_high, sentiment_low),
            'interpretation': interpret_p_value(p_val_sentiment)
        }
        
        print(f"   t统计量: {t_stat_sentiment:.3f}")
        print(f"   p值: {p_val_sentiment:.6f}")
        print(f"   效应大小(Cohen's d): {statistical_tests['sentiment_t_test']['effect_size']:.3f}")
        
        # 2. 独立样本t检验：评分差异
        print("\n2. 评分差异t检验...")
        rating_high = high_active['rating_mean'].dropna().tolist()
        rating_low = low_active['rating_mean'].dropna().tolist()
        
        t_stat_rating, p_val_rating = manual_t_test(rating_high, rating_low)
        
        statistical_tests['rating_t_test'] = {
            't_statistic': t_stat_rating,
            'p_value': p_val_rating,
            'effect_size': calculate_cohens_d(rating_high, rating_low),
            'interpretation': interpret_p_value(p_val_rating)
        }
        
        print(f"   t统计量: {t_stat_rating:.3f}")
        print(f"   p值: {p_val_rating:.6f}")
        print(f"   效应大小(Cohen's d): {statistical_tests['rating_t_test']['effect_size']:.3f}")
        
        # 3. 方差齐性检验（简化版）
        print("\n3. 方差齐性检验...")
        f_stat_sentiment, f_p_sentiment = manual_f_test(sentiment_high, sentiment_low)
        f_stat_rating, f_p_rating = manual_f_test(rating_high, rating_low)
        
        statistical_tests['variance_tests'] = {
            'sentiment_f_test': {
                'f_statistic': f_stat_sentiment,
                'p_value': f_p_sentiment,
                'interpretation': 'Equal variances' if f_p_sentiment > 0.05 else 'Unequal variances'
            },
            'rating_f_test': {
                'f_statistic': f_stat_rating,
                'p_value': f_p_rating,
                'interpretation': 'Equal variances' if f_p_rating > 0.05 else 'Unequal variances'
            }
        }
        
        # 4. 相关性显著性检验
        print("\n4. 相关性显著性检验...")
        correlation_tests = {}
        
        # 整体相关性检验
        sentiments_all = df_sample['sentiment_mean'].dropna().tolist()
        ratings_all = df_sample['rating_mean'].dropna().tolist()
        
        r_overall = manual_correlation(sentiments_all, ratings_all)
        t_r_overall, p_r_overall = correlation_significance_test(r_overall, len(sentiments_all))
        
        correlation_tests['overall'] = {
            'correlation': r_overall,
            't_statistic': t_r_overall,
            'p_value': p_r_overall,
            'interpretation': interpret_p_value(p_r_overall)
        }
        
        print(f"   整体相关性: r={r_overall:.4f}, t={t_r_overall:.3f}, p={p_r_overall:.6f}")
        
        statistical_tests['correlation_tests'] = correlation_tests
        
        # 输出统计检验总结
        print("\n=== 统计检验总结 ===")
        print("情绪差异检验:")
        print(f"  结果: {statistical_tests['sentiment_t_test']['interpretation']}")
        print(f"  效应大小: {interpret_effect_size(statistical_tests['sentiment_t_test']['effect_size'])}")
        
        print("评分差异检验:")
        print(f"  结果: {statistical_tests['rating_t_test']['interpretation']}")
        print(f"  效应大小: {interpret_effect_size(statistical_tests['rating_t_test']['effect_size'])}")
        
        print("相关性检验:")
        print(f"  结果: {correlation_tests['overall']['interpretation']}")
        
        # 保存结果
        with open('statistical_tests_results.json', 'w') as f:
            json.dump(statistical_tests, f, indent=2, default=str)
        
        print(f"\n✅ 统计检验完成，结果已保存")
        return statistical_tests
        
    except Exception as e:
        print(f"❌ 统计检验失败: {e}")
        return None

def manual_t_test(group1, group2):
    """手写独立样本t检验"""
    n1, n2 = len(group1), len(group2)
    
    if n1 < 2 or n2 < 2:
        return 0, 1
    
    # 计算均值
    mean1 = sum(group1) / n1
    mean2 = sum(group2) / n2
    
    # 计算方差
    var1 = sum((x - mean1) ** 2 for x in group1) / (n1 - 1)
    var2 = sum((x - mean2) ** 2 for x in group2) / (n2 - 1)
    
    # 合并标准误
    pooled_se = math.sqrt(var1/n1 + var2/n2)
    
    if pooled_se == 0:
        return 0, 1
    
    # t统计量
    t_stat = (mean1 - mean2) / pooled_se
    
    # 自由度
    df = n1 + n2 - 2
    
    # 简化的p值计算（双尾）
    p_value = 2 * (1 - t_cdf(abs(t_stat), df))
    
    return t_stat, p_value

def manual_f_test(group1, group2):
    """手写F检验（方差齐性）"""
    n1, n2 = len(group1), len(group2)
    
    if n1 < 2 or n2 < 2:
        return 1, 1
    
    # 计算方差
    mean1 = sum(group1) / n1
    mean2 = sum(group2) / n2
    var1 = sum((x - mean1) ** 2 for x in group1) / (n1 - 1)
    var2 = sum((x - mean2) ** 2 for x in group2) / (n2 - 1)
    
    if var2 == 0:
        return float('inf'), 0
    
    # F统计量
    f_stat = var1 / var2 if var1 > var2 else var2 / var1
    
    # 简化的p值（假设F分布）
    if f_stat > 2:
        p_value = 0.01
    elif f_stat > 1.5:
        p_value = 0.05
    else:
        p_value = 0.2
    
    return f_stat, p_value

def t_cdf(t, df):
    """简化的t分布CDF"""
    if df > 30:
        # 大样本近似正态分布
        return normal_cdf(t)
    else:
        # 简化近似
        if abs(t) > 3:
            return 0.999 if t > 0 else 0.001
        elif abs(t) > 2:
            return 0.975 if t > 0 else 0.025
        elif abs(t) > 1:
            return 0.85 if t > 0 else 0.15
        else:
            return 0.5 + t * 0.3

def normal_cdf(z):
    """简化的标准正态分布CDF"""
    if z > 3:
        return 0.9999
    elif z > 2:
        return 0.9772
    elif z > 1:
        return 0.8413
    elif z > 0:
        return 0.5 + z * 0.3413
    else:
        return 1 - normal_cdf(-z)

def calculate_cohens_d(group1, group2):
    """计算Cohen's d效应大小"""
    n1, n2 = len(group1), len(group2)
    
    if n1 < 2 or n2 < 2:
        return 0
    
    mean1 = sum(group1) / n1
    mean2 = sum(group2) / n2
    
    var1 = sum((x - mean1) ** 2 for x in group1) / (n1 - 1)
    var2 = sum((x - mean2) ** 2 for x in group2) / (n2 - 1)
    
    pooled_std = math.sqrt(((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2))
    
    if pooled_std == 0:
        return 0
    
    return (mean1 - mean2) / pooled_std

def correlation_significance_test(r, n):
    """相关系数显著性检验"""
    if n < 3:
        return 0, 1
    
    if abs(r) >= 1:
        return float('inf'), 0
    
    # t统计量
    t_stat = r * math.sqrt((n - 2) / (1 - r * r))
    
    # 自由度
    df = n - 2
    
    # p值
    p_value = 2 * (1 - t_cdf(abs(t_stat), df))
    
    return t_stat, p_value

def interpret_p_value(p):
    """解释p值"""
    if p < 0.001:
        return "极显著 (p<0.001)"
    elif p < 0.01:
        return "高度显著 (p<0.01)"
    elif p < 0.05:
        return "显著 (p<0.05)"
    elif p < 0.1:
        return "边际显著 (p<0.1)"
    else:
        return "不显著 (p≥0.1)"

def interpret_effect_size(d):
    """解释效应大小"""
    d = abs(d)
    if d >= 0.8:
        return "大效应"
    elif d >= 0.5:
        return "中等效应"
    elif d >= 0.2:
        return "小效应"
    else:
        return "微小效应"

def manual_correlation(x, y):
    """手写相关系数计算"""
    n = len(x)
    if n != len(y) or n < 2:
        return 0
    
    sum_x = sum(x)
    sum_y = sum(y)
    mean_x = sum_x / n
    mean_y = sum_y / n
    
    numerator = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n))
    sum_sq_x = sum((x[i] - mean_x) ** 2 for i in range(n))
    sum_sq_y = sum((y[i] - mean_y) ** 2 for i in range(n))
    
    denominator = math.sqrt(sum_sq_x * sum_sq_y)
    
    return numerator / denominator if denominator != 0 else 0

# 执行统计检验
statistical_results = simplified_statistical_tests()
